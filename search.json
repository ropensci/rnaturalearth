[{"path":"http://ropensci.github.io/rnaturalearth/articles/finding-data.html","id":"available-data","dir":"Articles","previous_headings":"","what":"Available data","title":"Finding data","text":"lot data can downloaded Natural Earth ne_download(). data divided two main categories: physical cultural vector data. df_layers_physical df_layers_cultural data frames included rnaturalearth packages show layer data can downloaded.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/articles/finding-data.html","id":"physical-vector-data","dir":"Articles","previous_headings":"Available data","what":"Physical vector data","title":"Finding data","text":"physical vector data available via ne_download() Based previous table, know can download ocean vector small scale (110). Note scales defined one 110, 50, 10 small, medium, large.","code":"data(df_layers_physical)  knitr::kable(   df_layers_physical,   caption = \"physical vector data available via ne_download()\" ) plot(   ne_download(type = \"ocean\", category = \"physical\", scale = \"small\")[     \"geometry\"   ],   col = \"lightblue\" ) #> Reading layer `ne_110m_ocean' from data source `/tmp/Rtmp1Lj6Y7/ne_110m_ocean.shp' using driver `ESRI Shapefile' #> Simple feature collection with 2 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -180 ymin: -85.60904 xmax: 180 ymax: 90 #> Geodetic CRS:  WGS 84"},{"path":"http://ropensci.github.io/rnaturalearth/articles/finding-data.html","id":"cultural-vector-data","dir":"Articles","previous_headings":"Available data","what":"Cultural vector data","title":"Finding data","text":"cultural vector data available via ne_download()","code":"data(df_layers_cultural)  knitr::kable(   df_layers_cultural,   caption = \"cultural vector data available via ne_download()\" ) plot(   ne_download(     type = \"airports\",     category = \"cultural\",     scale = 10L   )[\"geometry\"],   pch = 21L,   bg = \"grey\" ) #> Reading layer `ne_10m_airports' from data source `/tmp/Rtmp1Lj6Y7/ne_10m_airports.shp' using driver `ESRI Shapefile' #> Simple feature collection with 893 features and 40 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -175.1356 ymin: -53.78147 xmax: 179.1954 ymax: 78.24672 #> Geodetic CRS:  WGS 84"},{"path":"http://ropensci.github.io/rnaturalearth/articles/finding-data.html","id":"searching-for-countries-and-continents","dir":"Articles","previous_headings":"","what":"Searching for countries and continents","title":"Finding data","text":"article, explore can search data available download within rnaturalearth. Let’s begin loading country data using read_sf() function sf package. following code snippet, read Natural Earth dataset, contains information sovereignty countries.","code":"df <- read_sf(   \"/vsizip/vsicurl/https://naciscdn.org/naturalearth/10m/cultural/ne_10m_admin_0_sovereignty.zip\" )  head(df) #> Simple feature collection with 6 features and 168 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -109.4537 ymin: -55.9185 xmax: 140.9776 ymax: 7.35578 #> Geodetic CRS:  WGS 84 #> # A tibble: 6 × 169 #>   featurecla     scalerank LABELRANK SOVEREIGNT SOV_A3 ADM0_DIF LEVEL TYPE  TLC   ADMIN ADM0_A3 #>   <chr>              <int>     <int> <chr>      <chr>     <int> <int> <chr> <chr> <chr> <chr>   #> 1 Admin-0 sover…         5         2 Indonesia  IDN           0     2 Sove… 1     Indo… IDN     #> 2 Admin-0 sover…         5         3 Malaysia   MYS           0     2 Sove… 1     Mala… MYS     #> 3 Admin-0 sover…         0         2 Chile      CHL           0     2 Sove… 1     Chile CHL     #> 4 Admin-0 sover…         0         3 Bolivia    BOL           0     2 Sove… 1     Boli… BOL     #> 5 Admin-0 sover…         0         2 Peru       PER           0     2 Sove… 1     Peru  PER     #> 6 Admin-0 sover…         0         2 Argentina  ARG           0     2 Sove… 1     Arge… ARG     #> # ℹ 158 more variables: GEOU_DIF <int>, GEOUNIT <chr>, GU_A3 <chr>, SU_DIF <int>, #> #   SUBUNIT <chr>, SU_A3 <chr>, BRK_DIFF <int>, NAME <chr>, NAME_LONG <chr>, BRK_A3 <chr>, #> #   BRK_NAME <chr>, BRK_GROUP <chr>, ABBREV <chr>, POSTAL <chr>, FORMAL_EN <chr>, #> #   FORMAL_FR <chr>, NAME_CIAWF <chr>, NOTE_ADM0 <chr>, NOTE_BRK <chr>, NAME_SORT <chr>, #> #   NAME_ALT <chr>, MAPCOLOR7 <int>, MAPCOLOR8 <int>, MAPCOLOR9 <int>, MAPCOLOR13 <int>, #> #   POP_EST <dbl>, POP_RANK <int>, POP_YEAR <int>, GDP_MD <int>, GDP_YEAR <int>, #> #   ECONOMY <chr>, INCOME_GRP <chr>, FIPS_10 <chr>, ISO_A2 <chr>, ISO_A2_EH <chr>, #> #   ISO_A3 <chr>, ISO_A3_EH <chr>, ISO_N3 <chr>, ISO_N3_EH <chr>, UN_A3 <chr>, WB_A2 <chr>, #> #   WB_A3 <chr>, WOE_ID <int>, WOE_ID_EH <int>, WOE_NOTE <chr>, ADM0_ISO <chr>, #> #   ADM0_DIFF <chr>, ADM0_TLC <chr>, ADM0_A3_US <chr>, ADM0_A3_FR <chr>, ADM0_A3_RU <chr>, #> #   ADM0_A3_ES <chr>, ADM0_A3_CN <chr>, ADM0_A3_TW <chr>, ADM0_A3_IN <chr>, ADM0_A3_NP <chr>, #> #   ADM0_A3_PK <chr>, ADM0_A3_DE <chr>, ADM0_A3_GB <chr>, ADM0_A3_BR <chr>, ADM0_A3_IL <chr>, #> #   ADM0_A3_PS <chr>, ADM0_A3_SA <chr>, ADM0_A3_EG <chr>, ADM0_A3_MA <chr>, ADM0_A3_PT <chr>, #> #   ADM0_A3_AR <chr>, ADM0_A3_JP <chr>, ADM0_A3_KO <chr>, ADM0_A3_VN <chr>, ADM0_A3_TR <chr>, #> #   ADM0_A3_ID <chr>, ADM0_A3_PL <chr>, ADM0_A3_GR <chr>, ADM0_A3_IT <chr>, ADM0_A3_NL <chr>, #> #   ADM0_A3_SE <chr>, ADM0_A3_BD <chr>, ADM0_A3_UA <chr>, ADM0_A3_UN <int>, ADM0_A3_WB <int>, #> #   CONTINENT <chr>, REGION_UN <chr>, SUBREGION <chr>, REGION_WB <chr>, NAME_LEN <int>, #> #   LONG_LEN <int>, ABBREV_LEN <int>, TINY <int>, HOMEPART <int>, MIN_ZOOM <dbl>, #> #   MIN_LABEL <dbl>, MAX_LABEL <dbl>, LABEL_X <dbl>, LABEL_Y <dbl>, NE_ID <dbl>, #> #   WIKIDATAID <chr>, NAME_AR <chr>, NAME_BN <chr>, NAME_DE <chr>, …"},{"path":"http://ropensci.github.io/rnaturalearth/articles/finding-data.html","id":"finding-countries","dir":"Articles","previous_headings":"Searching for countries and continents","what":"Finding countries","title":"Finding data","text":"One way search countries search within ADMIN vector. Let’s start plotting first countries.  Suppose want search polygons US, spell ? One possibility consists search within ADMIN vector using regular expression find occurrences word states. can now get data.","code":"lapply(   df$ADMIN[1L:6L],   \\(x) plot(ne_countries(country = x)[\"geometry\"], main = x) ) ne_countries(country = \"USA\") ne_countries(country = \"United States\") ne_countries(country = \"United States Of America\") ne_countries(country = \"United States of America\") grep(\"states\", df$ADMIN, ignore.case = TRUE, value = TRUE) #> [1] \"United States of America\"       \"Federated States of Micronesia\" plot(ne_countries(country = \"United States of America\")[\"geometry\"])"},{"path":"http://ropensci.github.io/rnaturalearth/articles/finding-data.html","id":"continents","dir":"Articles","previous_headings":"Searching for countries and continents","what":"Continents","title":"Finding data","text":"Finally, let’s create plots continent using ne_countries function continent parameter.","code":"unique(df$CONTINENT) #> [1] \"Asia\"                    \"South America\"           \"Europe\"                  #> [4] \"Africa\"                  \"North America\"           \"Oceania\"                 #> [7] \"Antarctica\"              \"Seven seas (open ocean)\" lapply(   unique(df$CONTINENT),   \\(x)     plot(       ne_countries(         continent = x,         scale = \"medium\"       )[\"geometry\"],       main = x     ) )"},{"path":"http://ropensci.github.io/rnaturalearth/articles/language-support.html","id":"load-required-packages","dir":"Articles","previous_headings":"","what":"Load required packages","title":"Language support in rnaturalearth","text":"","code":"library(rnaturalearth) library(sf) library(ggplot2) library(ggrepel) library(tmap) library(knitr)  theme_set(theme_minimal())  sf_use_s2(FALSE)"},{"path":"http://ropensci.github.io/rnaturalearth/articles/language-support.html","id":"country-maps-with-labels-in-other-languages","dir":"Articles","previous_headings":"","what":"Country maps with labels in other languages","title":"Language support in rnaturalearth","text":"","code":"# Africa terra::plot(ne_countries(continent = \"africa\")) #> Warning: plotting the first 9 out of 168 attributes; use max.plot = 168 to plot all sfaf <- ne_countries(continent = \"africa\", returnclass = \"sf\") sfafc <- st_centroid(sfaf) #> Warning: st_centroid assumes attributes are constant over geometries #> Warning in st_centroid.sfc(st_geometry(x), of_largest_polygon = of_largest_polygon): #> st_centroid does not give correct centroids for longitude/latitude data  sfaf <- cbind(sfaf, st_coordinates(st_centroid(sfaf$geometry))) #> Warning in st_centroid.sfc(sfaf$geometry): st_centroid does not give correct centroids for #> longitude/latitude data  # this adds centroids in the middle of countries ggplot(sfaf) +   geom_sf() +   geom_sf(data = sfafc) # trying labels in the middle of countries, doesn't quite work needs x,y,label # but once x & y added on with st_coordinates ... seems getting the coords might # not be necessary for much longer https://github.com/slowkow/ggrepel/issues/111 # cool nearly there ... ggplot(sfaf) +   geom_sf() +   geom_text_repel(aes(x = X, y = Y, label = name), size = 3L) # getting there, labels still overlap a bit maybe make map bigger to allow space # for labels ggplot(sfaf) +   geom_sf() +   geom_text_repel(aes(x = X, y = Y, label = name_es), size = 3L) # point.padding=NA allows labels to overlap the centroid ggplot(sfaf) +   geom_sf() +   geom_text_repel(     aes(x = X, y = Y, label = name_es),     point.padding = NA,     size = 3L   ) # Africa labels just down left & right sides works pretty well I think ggplot(sfaf) +   geom_sf() +   xlim(-28L, 61L) +   geom_text_repel(     aes(x = X, y = Y, label = name_es),     data = subset(sfaf, X > 21L),     nudge_x = 60L - subset(sfaf, X > 21L)$X,     segment.size = 0.2,     segment.color = \"grey50\",     direction = \"y\",     hjust = 0L,     size = 3L   ) +   geom_text_repel(     aes(x = X, y = Y, label = name_es),     data = subset(sfaf, X < 21L),     nudge_x = -19L - subset(sfaf, X < 21L)$X,     segment.size = 0.2,     segment.color = \"grey50\",     direction = \"y\",     hjust = 1L,     size = 3L   ) # french labels ggplot(sfaf) +   geom_sf() +   xlim(-28L, 61L) +   geom_text_repel(     aes(x = X, y = Y, label = name_fr),     data = subset(sfaf, X > 21L),     nudge_x = 60L - subset(sfaf, X > 21L)$X,     segment.size = 0.2,     segment.color = \"grey50\",     direction = \"y\",     hjust = 0L,     size = 3L   ) +   geom_text_repel(     aes(x = X, y = Y, label = name_fr),     data = subset(sfaf, X < 21L),     nudge_x = -19L - subset(sfaf, X < 21L)$X,     segment.size = 0.2,     segment.color = \"grey50\",     direction = \"y\",     hjust = 1L,     size = 3L   ) # tmap good but labels currently overlap  # english labels tm_shape(sfaf) +   tm_borders() +   tm_text(\"name\", size = 0.75) # spanish labels tm_shape(sfaf) +   tm_borders() +   tm_text(\"name_es\", size = 0.75) # other languages de, fr, nl, tm_shape(sfaf) +   tm_borders() +   tm_text(\"name_de\", size = 0.75)"},{"path":"http://ropensci.github.io/rnaturalearth/articles/rnaturalearth.html","id":"load-required-packages","dir":"Articles","previous_headings":"","what":"load required packages","title":"Introduction to rnaturalearth.","text":"","code":"library(rnaturalearth)"},{"path":"http://ropensci.github.io/rnaturalearth/articles/rnaturalearth.html","id":"maps-in-the-package-","dir":"Articles","previous_headings":"","what":"Maps in the package.","title":"Introduction to rnaturalearth.","text":"Pre-downloaded maps can accessed : ne_countries() country (admin-0) boundaries ne_states() boundaries within countries (admin-1) ne_coastline() world coastline","code":"# world at small scale (low resolution) plot(ne_countries(type = \"countries\", scale = \"small\")) #> Warning: plotting the first 10 out of 168 attributes; use max.plot = 168 to plot all # countries, UK undivided plot(ne_countries(country = \"united kingdom\", type = \"countries\")) #> Warning: plotting the first 9 out of 168 attributes; use max.plot = 168 to plot all # map_units, UK divided into England, Scotland, Wales and Northern Ireland plot(ne_countries(country = \"united kingdom\", type = \"map_units\")) #> Warning: plotting the first 9 out of 168 attributes; use max.plot = 168 to plot all # countries, small scale plot(ne_countries(country = \"united kingdom\", scale = \"small\")) #> Warning: plotting the first 9 out of 168 attributes; use max.plot = 168 to plot all # countries, medium scale plot(ne_countries(country = \"united kingdom\", scale = \"medium\")) #> Warning: plotting the first 10 out of 168 attributes; use max.plot = 168 to plot all # not evaluated because rely on rnaturalearthhires data which are on rOpenSci # so CRAN check likely to fail  # countries, large scale plot(ne_countries(country = \"united kingdom\", scale = \"large\"))  # states country='united kingdom' plot(ne_states(country = \"united kingdom\")) # states geounit='england' plot(ne_states(geounit = \"england\"))  # states country='france' plot(ne_states(country = \"france\")) # coastline of the world # subsetting of coastline is not possible because the Natural Earth data are # not attributed in that way plot(ne_coastline())"},{"path":"http://ropensci.github.io/rnaturalearth/articles/rnaturalearth.html","id":"downloading-other-natural-earth-vectors-with-ne_download-","dir":"Articles","previous_headings":"","what":"Downloading other Natural Earth vectors with ne_download().","title":"Introduction to rnaturalearth.","text":"Natural Earth dataset characterised website according scale, type category. rnaturalearth allows specify scale, type category construct url download corresponding file.","code":"# lakes lakes110 <- ne_download(scale = 110L, type = \"lakes\", category = \"physical\") plot(lakes110, col = \"blue\")  # rivers rivers110 <- ne_download(   scale = 110L,   type = \"rivers_lake_centerlines\",   category = \"physical\" ) plot(rivers110, col = \"blue\")"},{"path":"http://ropensci.github.io/rnaturalearth/articles/rnaturalearth.html","id":"tables-of-vector-layers-available-via-ne_downloadtypelayer_name-scale","dir":"Articles","previous_headings":"","what":"Tables of vector layers available via ne_download(type=[layer_name], scale=)","title":"Introduction to rnaturalearth.","text":"1=available, 0=category=‘physical’ vector data available via ne_download() category=‘cultural’ vector data available via ne_download()","code":""},{"path":"http://ropensci.github.io/rnaturalearth/articles/what-is-a-country.html","id":"load-required-packages","dir":"Articles","previous_headings":"","what":"Load required packages","title":"What is a country ?","text":"","code":"library(rnaturalearth)"},{"path":"http://ropensci.github.io/rnaturalearth/articles/what-is-a-country.html","id":"country-types-countries-map_units-and-sovereignty","dir":"Articles","previous_headings":"","what":"Country types : countries, map_units and sovereignty","title":"What is a country ?","text":"Natural Earth data classified countries, map_units sovereignty. see specifying united kingdom countries gives UK undivided map_units gives England, Scotland, Wales Northern Ireland sovereignty includes Falkland Islands Filtering geounit can give finer control, e.g. plot Scotland alone, France without French Guiana.","code":"# countries, UK undivided plot(ne_countries(country = \"united kingdom\", type = \"countries\")[\"geometry\"]) # map_units, UK divided into England, Scotland, Wales and Northern Ireland plot(ne_countries(country = \"united kingdom\", type = \"map_units\")[\"geometry\"]) # map_units, select by geounit to plot Scotland alone plot(ne_countries(geounit = \"scotland\", type = \"map_units\")[\"geometry\"]) # sovereignty, Falkland Islands included in UK plot(   ne_countries(country = \"united kingdom\", type = \"sovereignty\")[\"geometry\"],   col = \"red\" )  plot(ne_coastline(scale = 110L)[\"geometry\"], lty = 3L, add = TRUE) # France, country includes French Guiana plot(ne_countries(country = \"france\")[\"geometry\"]) # France map_units includes French Guiana too plot(ne_countries(country = \"france\", type = \"map_units\")[\"geometry\"])  # France filter map_units by geounit to exclude French Guiana plot(ne_countries(geounit = \"france\", type = \"map_units\")[\"geometry\"]) # France sovereignty includes South Pacicic islands plot(   ne_countries(country = \"france\", type = \"sovereignty\")[\"geometry\"],   col = \"red\" )  plot(ne_coastline(scale = 110L)[\"geometry\"], lty = 3L, add = TRUE)"},{"path":"http://ropensci.github.io/rnaturalearth/articles/what-is-a-country.html","id":"country-scales-small-medium-and-large","dir":"Articles","previous_headings":"","what":"Country scales : small, medium and large","title":"What is a country ?","text":"different definitions country outlined available different scales.","code":"plot(   ne_countries(country = \"united kingdom\", scale = \"large\")[\"geometry\"],   main = \"large scale\" ) # countries, medium scale plot(   ne_countries(country = \"united kingdom\", scale = \"medium\")[\"geometry\"],   main = \"medium scale\" ) # countries, small scale plot(   ne_countries(country = \"united kingdom\", scale = \"small\")[\"geometry\"],   main = \"small scale\" )"},{"path":"http://ropensci.github.io/rnaturalearth/articles/what-is-a-country.html","id":"states-admin-level-1-select-by-country-or-geounit","dir":"Articles","previous_headings":"","what":"States, admin level 1, select by country or geounit","title":"What is a country ?","text":"","code":"# states country='united kingdom' plot(ne_states(country = \"united kingdom\")[\"geometry\"]) # states geounit='england' plot(ne_states(geounit = \"england\")[\"geometry\"]) # states country='france' plot(ne_states(country = \"france\")[\"geometry\"]) # states geounit='france' plot(ne_states(geounit = \"france\")[\"geometry\"])"},{"path":"http://ropensci.github.io/rnaturalearth/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philippe Massicotte. Author, maintainer. Andy South. Author. Koen Hufkens. Contributor.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Massicotte P, South (2025). rnaturalearth: World Map Data Natural Earth. R package version 1.0.1.9000, https://github.com/ropensci/rnaturalearth, https://docs.ropensci.org/rnaturalearthhires/, https://docs.ropensci.org/rnaturalearth/.","code":"@Manual{,   title = {rnaturalearth: World Map Data from Natural Earth},   author = {Philippe Massicotte and Andy South},   year = {2025},   note = {R package version 1.0.1.9000, https://github.com/ropensci/rnaturalearth, https://docs.ropensci.org/rnaturalearthhires/},   url = {https://docs.ropensci.org/rnaturalearth/}, }"},{"path":"http://ropensci.github.io/rnaturalearth/index.html","id":"rnaturalearth","dir":"","previous_headings":"","what":"World Map Data from Natural Earth","title":"World Map Data from Natural Earth","text":"R package hold facilitate interaction Natural Earth map data. package provides : access pre-downloaded subset Natural Earth v4.1.0 (March 2018) vector data commonly used world mapping easy subsetting countries regions functions download Natural Earth vector raster data simple, reproducible sustainable workflow Natural Earth data rnaturalearth enabling updating new versions become available clarification differences world maps classified countries, sovereign states map units consistency Natural Earth naming conventions rnaturalearth users can use Natural Earth documentation data sf sv formats Natural Earth website structures vector data scale, category type. determine filenames downloads. rnaturalearth uses structure facilitate download (like API).","code":""},{"path":"http://ropensci.github.io/rnaturalearth/index.html","id":"install-rnaturalearth","dir":"","previous_headings":"","what":"Install rnaturalearth","title":"World Map Data from Natural Earth","text":"Install CRAN : install development version GitHub using devtools. Data support much package functionality stored two data packages prompted install required .","code":"install.packages(\"rnaturalearth\") devtools::install_github(\"ropensci/rnaturalearth\") devtools::install_github(\"ropensci/rnaturalearthdata\") devtools::install_github(\"ropensci/rnaturalearthhires\")"},{"path":"http://ropensci.github.io/rnaturalearth/index.html","id":"first-usage","dir":"","previous_headings":"","what":"First usage","title":"World Map Data from Natural Earth","text":"using plot simple, quick way plot maps. Maps also made ggplot2, tmap options. retrieval functions accept argument returnclass = \"sf\" return package sf (Simple Features) returnclass = \"sv\" (SpatVector) objects.","code":"library(rnaturalearth)  # world countries plot(ne_countries()) Warning: plotting the first 9 out of 168 attributes; use max.plot = 168 to plot all # uk plot(ne_countries(country = \"united kingdom\")) Warning: plotting the first 10 out of 168 attributes; use max.plot = 168 to plot all # states, admin level1 boundaries plot(ne_states(country = \"spain\")) Warning: plotting the first 9 out of 121 attributes; use max.plot = 121 to plot all"},{"path":"http://ropensci.github.io/rnaturalearth/index.html","id":"introductory-vignette","dir":"","previous_headings":"","what":"Introductory vignette","title":"World Map Data from Natural Earth","text":"","code":"vignette(\"rnaturalearth\", package = \"rnaturalearth\")"},{"path":"http://ropensci.github.io/rnaturalearth/index.html","id":"to-download-natural-earth-data-not-already-in-the-package","dir":"","previous_headings":"","what":"To download Natural Earth data not already in the package","title":"World Map Data from Natural Earth","text":"wealth data available Natural Earth website. rnaturalearth functions help download data. data available outlined two tables online . Specify scale, category type vector want examples .","code":"category   cultural   category   physical # lakes lakes110 <- ne_download(scale = 110, type = \"lakes\", category = \"physical\") plot(lakes110)  # rivers rivers50 <- ne_download(   scale = 50,   type = \"rivers_lake_centerlines\",   category = \"physical\",   returnclass = \"sf\" )  library(ggplot2) library(sf)  ggplot(rivers50) +   geom_sf() +   theme_minimal()"},{"path":"http://ropensci.github.io/rnaturalearth/index.html","id":"details-of-different-country-definitions-and-scales","dir":"","previous_headings":"","what":"Details of different country definitions and scales","title":"World Map Data from Natural Earth","text":"","code":"vignette(\"what-is-a-country\", package = \"rnaturalearth\")"},{"path":"http://ropensci.github.io/rnaturalearth/index.html","id":"reproducible-download-of-natural-earth-data-into-the-package","dir":"","previous_headings":"","what":"Reproducible download of Natural Earth data into the package","title":"World Map Data from Natural Earth","text":"Script used get data accompanying data packages.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/index.html","id":"errors-in-the-data","dir":"","previous_headings":"","what":"Errors in the data?","title":"World Map Data from Natural Earth","text":"believe issue data provided Natural Earth, please report . responsible accuracy maintenance Natural Earth data. concerns regarding data, please contact Natural Earth.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"World Map Data from Natural Earth","text":"Thanks Lincoln Mullen code structure inspiration USAboundaries, Hadley Wickham comments prompting, Bob Rudis answers stackoverflow questions downloading Natural Earth data R. Natural Earth team Nathan Kelso providing great resource.","code":""},{"path":[]},{"path":"http://ropensci.github.io/rnaturalearth/index.html","id":"potential-additional-data","dir":"","previous_headings":"Potential future work","what":"Potential additional data","title":"World Map Data from Natural Earth","text":"dataframe ISO3 country synonyms similar https://github.com/AndySouth/rworldmap/blob/master/data/countrySynonyms.rda dataframe ISO3 membership different regional groupings, e.g. continent, least developed countries etc. similar https://github.com/AndySouth/rworldmap/blob/master/data/countryRegions.rda","code":""},{"path":"http://ropensci.github.io/rnaturalearth/index.html","id":"potential-additional-functions","dir":"","previous_headings":"Potential future work","what":"Potential additional functions","title":"World Map Data from Natural Earth","text":"facilitate joining user data country boundaries similar https://github.com/AndySouth/rworldmap/blob/master/R/joinCountryData2Map.R … better name similar allowing join ISO codes names, attempted synonym matching similar reporting country joining success failure facilitate subsetting country groupings e.g. least developed countries etc.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/check_data_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"check whether the requested data exist on Natural Earth — check_data_exist","title":"check whether the requested data exist on Natural Earth — check_data_exist","text":"checks list dependent type, category scale. returns FALSE data may still exist website. yet checking raster names found naming convention tricky.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/check_data_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check whether the requested data exist on Natural Earth — check_data_exist","text":"","code":"check_data_exist(   type,   scale = 110L,   category = c(\"cultural\", \"physical\", \"raster\") )"},{"path":"http://ropensci.github.io/rnaturalearth/reference/check_data_exist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check whether the requested data exist on Natural Earth — check_data_exist","text":"type type natural earth file download one 'countries', 'map_units', 'map_subunits', 'sovereignty', 'states' portion natural earth vector url scale . e.g. 'ne_50m_urban_areas.zip' 'urban_areas' raster filename e.g. 'MSR_50M.zip' 'MSR_50M' scale scale map return, one `110`, `50`, `10` `small`, `medium`, `large`. category one natural earth categories : 'cultural', 'physical', 'raster'","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/check_data_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check whether the requested data exist on Natural Earth — check_data_exist","text":"TRUE FALSE","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/check_data_exist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"check whether the requested data exist on Natural Earth — check_data_exist","text":"Note filename requested object returned `load = FALSE`. data loaded memory (`load = TRUE`), download handled using GDAL virtual file system, allowing direct access data without writing disk.","code":""},{"path":[]},{"path":"http://ropensci.github.io/rnaturalearth/reference/check_data_exist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"check whether the requested data exist on Natural Earth — check_data_exist","text":"","code":"check_data_exist(type = \"countries\", scale = 110, category = \"cultural\") #> [1] TRUE  # Type not in list for this category check_data_exist(type = \"airports\", scale = 110, category = \"physical\") #> Warning: `airports` seems not to be in the list for category= \"physical\" maybe try the #> other category of c('cultural', 'physical') #> [1] FALSE  # Type in list but scale shows FALSE check_data_exist(type = \"airports\", scale = 110, category = \"cultural\") #> Warning: The requested daa seem not to exist in the list of Natural Earth data. Check #> `?ne_download` or <http://www.naturalearthdata.com/features/> to see data #> availability. #> [1] FALSE"},{"path":"http://ropensci.github.io/rnaturalearth/reference/check_rnaturalearthdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether to install rnaturalearthdata and install if necessary — check_rnaturalearthdata","title":"Check whether to install rnaturalearthdata and install if necessary — check_rnaturalearthdata","text":"rnaturalearthdata package installed, install GitHub using devtools. date, reinstall .","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/check_rnaturalearthdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether to install rnaturalearthdata and install if necessary — check_rnaturalearthdata","text":"","code":"check_rnaturalearthdata()"},{"path":"http://ropensci.github.io/rnaturalearth/reference/check_rnaturalearthhires.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether to install rnaturalearthhires and install if necessary — check_rnaturalearthhires","title":"Check whether to install rnaturalearthhires and install if necessary — check_rnaturalearthhires","text":"rnaturalearthhires package installed, install GitHub using devtools. date, reinstall .","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/check_rnaturalearthhires.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether to install rnaturalearthhires and install if necessary — check_rnaturalearthhires","text":"","code":"check_rnaturalearthhires()"},{"path":"http://ropensci.github.io/rnaturalearth/reference/check_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"check that this scale is present in Natural Earth — check_scale","title":"check that this scale is present in Natural Earth — check_scale","text":"check name numeric scale representations, return numeric one","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/check_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check that this scale is present in Natural Earth — check_scale","text":"","code":"check_scale(x)"},{"path":"http://ropensci.github.io/rnaturalearth/reference/check_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check that this scale is present in Natural Earth — check_scale","text":"x scale map return, one 110, 50, 10 'small', 'medium', 'large'","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/check_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check that this scale is present in Natural Earth — check_scale","text":"integer scale map","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/convert_spatial_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert from/to sf/sv objects — convert_spatial_class","title":"Convert from/to sf/sv objects — convert_spatial_class","text":"returns downloaded data spatial object filename load=FALSE. destdir specified data can reloaded later R session using ne_load arguments.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/convert_spatial_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert from/to sf/sv objects — convert_spatial_class","text":"","code":"convert_spatial_class(x, returnclass = c(\"sf\", \"sv\"))"},{"path":"http://ropensci.github.io/rnaturalearth/reference/convert_spatial_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert from/to sf/sv objects — convert_spatial_class","text":"x Object converted returnclass string determining spatial object return. Either \"sf\" simple feature (`sf`, default) \"sv\" `SpatVector` (`terra`).","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/convert_spatial_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert from/to sf/sv objects — convert_spatial_class","text":"Object class \"sf\" \"sv\"","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/convert_spatial_class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert from/to sf/sv objects — convert_spatial_class","text":"Note filename requested object returned `load = FALSE`. data loaded memory (`load = TRUE`), download handled using GDAL virtual file system, allowing direct access data without writing disk.","code":""},{"path":[]},{"path":"http://ropensci.github.io/rnaturalearth/reference/convert_spatial_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert from/to sf/sv objects — convert_spatial_class","text":"","code":"if (FALSE) { # \\dontrun{ spdf_world <- ne_download(scale = 110, type = \"countries\")  plot(spdf_world) plot(ne_download(type = \"populated_places\"))  # reloading from the saved file in the same session with same arguments  spdf_world2 <- ne_load(scale = 110, type = \"countries\")  # download followed by load from specified directory will work across sessions spdf_world <- ne_download(scale = 110, type = \"countries\", destdir = getwd()) spdf_world2 <- ne_load(scale = 110, type = \"countries\", destdir = getwd())  # for raster, here an example with Manual Shaded Relief (MSR) download & load  rst <- ne_download(scale = 50, type = \"MSR_50M\", category = \"raster\", destdir = getwd())  # load after having downloaded rst <- ne_load(   scale = 50, type = \"MSR_50M\", category = \"raster\", destdir = getwd() )  # plot library(terra) terra::plot(rst) # end dontrun } # }"},{"path":"http://ropensci.github.io/rnaturalearth/reference/countries.html","id":null,"dir":"Reference","previous_headings":"","what":"world country polygons from Natural Earth — countries","title":"world country polygons from Natural Earth — countries","text":"1:110m scale (small). data resolutions packages rnaturalearthdata rnaturalearthhires.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"world country polygons from Natural Earth — countries","text":"","code":"countries110"},{"path":"http://ropensci.github.io/rnaturalearth/reference/countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"world country polygons from Natural Earth — countries","text":"sf object. object class sf (inherits data.frame) 177 rows 169 columns.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/countries.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"world country polygons from Natural Earth — countries","text":"https://naciscdn.org/naturalearth/10m/cultural/ne_10m_admin_0_countries.zip","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/countries.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"world country polygons from Natural Earth — countries","text":"data data frame country attributes.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/df_layers_cultural.html","id":null,"dir":"Reference","previous_headings":"","what":"list of cultural layers available from Natural Earth — df_layers_cultural","title":"list of cultural layers available from Natural Earth — df_layers_cultural","text":"list cultural layers available Natural Earth","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/df_layers_cultural.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list of cultural layers available from Natural Earth — df_layers_cultural","text":"","code":"df_layers_cultural"},{"path":"http://ropensci.github.io/rnaturalearth/reference/df_layers_cultural.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"list of cultural layers available from Natural Earth — df_layers_cultural","text":"DataFrame object class data.frame 43 rows 4 columns.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/df_layers_physical.html","id":null,"dir":"Reference","previous_headings":"","what":"list of physical layers available from Natural Earth — df_layers_physical","title":"list of physical layers available from Natural Earth — df_layers_physical","text":"list physical layers available Natural Earth","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/df_layers_physical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"list of physical layers available from Natural Earth — df_layers_physical","text":"","code":"df_layers_physical"},{"path":"http://ropensci.github.io/rnaturalearth/reference/df_layers_physical.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"list of physical layers available from Natural Earth — df_layers_physical","text":"DataFrame object class data.frame 29 rows 4 columns.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from within the package — get_data","title":"Get data from within the package — get_data","text":"returns world country polygons specified scale, used ne_countries()","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from within the package — get_data","text":"","code":"get_data(   scale = 110L,   type = c(\"countries\", \"map_units\", \"sovereignty\", \"tiny_countries\") )"},{"path":"http://ropensci.github.io/rnaturalearth/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from within the package — get_data","text":"scale scale map return, one `110`, `50`, `10` `small`, `medium`, `large`. type country type, one 'countries', 'map_units', 'sovereignty', 'tiny_countries'","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from within the package — get_data","text":"sf object.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/get_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data from within the package — get_data","text":"Note filename requested object returned `load = FALSE`. data loaded memory (`load = TRUE`), download handled using GDAL virtual file system, allowing direct access data without writing disk.","code":""},{"path":[]},{"path":"http://ropensci.github.io/rnaturalearth/reference/get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from within the package — get_data","text":"","code":"if (FALSE) { # \\dontrun{ spdf_world <- ne_download(scale = 110, type = \"countries\")  plot(spdf_world) plot(ne_download(type = \"populated_places\"))  # reloading from the saved file in the same session with same arguments  spdf_world2 <- ne_load(scale = 110, type = \"countries\")  # download followed by load from specified directory will work across sessions spdf_world <- ne_download(scale = 110, type = \"countries\", destdir = getwd()) spdf_world2 <- ne_load(scale = 110, type = \"countries\", destdir = getwd())  # for raster, here an example with Manual Shaded Relief (MSR) download & load  rst <- ne_download(scale = 50, type = \"MSR_50M\", category = \"raster\", destdir = getwd())  # load after having downloaded rst <- ne_load(   scale = 50, type = \"MSR_50M\", category = \"raster\", destdir = getwd() )  # plot library(terra) terra::plot(rst) # end dontrun } # }"},{"path":"http://ropensci.github.io/rnaturalearth/reference/install_rnaturalearthdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Install the naturalearthdata package after checking with the user — install_rnaturalearthdata","title":"Install the naturalearthdata package after checking with the user — install_rnaturalearthdata","text":"Install naturalearthdata package checking user","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/install_rnaturalearthdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install the naturalearthdata package after checking with the user — install_rnaturalearthdata","text":"","code":"install_rnaturalearthdata()"},{"path":"http://ropensci.github.io/rnaturalearth/reference/install_rnaturalearthhires.html","id":null,"dir":"Reference","previous_headings":"","what":"Install the naturalearthhires package after checking with the user — install_rnaturalearthhires","title":"Install the naturalearthhires package after checking with the user — install_rnaturalearthhires","text":"Install naturalearthhires package checking user","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/install_rnaturalearthhires.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install the naturalearthhires package after checking with the user — install_rnaturalearthhires","text":"","code":"install_rnaturalearthhires()"},{"path":"http://ropensci.github.io/rnaturalearth/reference/layer_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the layer name for a Natural Earth dataset — layer_name","title":"Generate the layer name for a Natural Earth dataset — layer_name","text":"Generate layer name Natural Earth dataset","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/layer_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the layer name for a Natural Earth dataset — layer_name","text":"","code":"layer_name(type, scale)"},{"path":"http://ropensci.github.io/rnaturalearth/reference/layer_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the layer name for a Natural Earth dataset — layer_name","text":"type type natural earth file download one 'countries', 'map_units', 'map_subunits', 'sovereignty', 'states' portion natural earth vector url scale . e.g. 'ne_50m_urban_areas.zip' 'urban_areas' raster filename e.g. 'MSR_50M.zip' 'MSR_50M' scale scale map return, one `110`, `50`, `10` `small`, `medium`, `large`.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/layer_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the layer name for a Natural Earth dataset — layer_name","text":"string representing dataset layer name.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_coastline.html","id":null,"dir":"Reference","previous_headings":"","what":"Get natural earth world coastline — ne_coastline","title":"Get natural earth world coastline — ne_coastline","text":"returns world coastline specified scale","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_coastline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get natural earth world coastline — ne_coastline","text":"","code":"ne_coastline(scale = 110L, returnclass = c(\"sf\", \"sv\"))"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_coastline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get natural earth world coastline — ne_coastline","text":"scale scale map return, one `110`, `50`, `10` `small`, `medium`, `large`. returnclass string determining spatial object return. Either \"sf\" simple feature (`sf`, default) \"sv\" `SpatVector` (`terra`).","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_coastline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get natural earth world coastline — ne_coastline","text":"object class `sf` simple feature (`sf`, default) `SpatVector` (`terra`).","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_coastline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get natural earth world coastline — ne_coastline","text":"Note filename requested object returned `load = FALSE`. data loaded memory (`load = TRUE`), download handled using GDAL virtual file system, allowing direct access data without writing disk.","code":""},{"path":[]},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_coastline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get natural earth world coastline — ne_coastline","text":"","code":"if (requireNamespace(\"rnaturalearthdata\")) {   coast <- ne_coastline()   plot(coast) } #> Loading required namespace: rnaturalearthdata"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Get natural earth world country polygons — ne_countries","title":"Get natural earth world country polygons — ne_countries","text":"returns world country polygons specified scale, points tiny_countries","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get natural earth world country polygons — ne_countries","text":"","code":"ne_countries(   scale = 110L,   type = \"countries\",   continent = NULL,   country = NULL,   geounit = NULL,   sovereignty = NULL,   returnclass = c(\"sf\", \"sv\") )"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_countries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get natural earth world country polygons — ne_countries","text":"scale scale map return, one `110`, `50`, `10` `small`, `medium`, `large`. type country type, one 'countries', 'map_units', 'sovereignty', 'tiny_countries' continent character vector continent names get countries . country character vector country names. geounit character vector geounit names. sovereignty character vector sovereignty names. returnclass string determining spatial object return. Either \"sf\" simple feature (`sf`, default) \"sv\" `SpatVector` (`terra`).","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_countries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get natural earth world country polygons — ne_countries","text":"object class `sf` simple feature (`sf`, default) `SpatVector` (`terra`).","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_countries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get natural earth world country polygons — ne_countries","text":"Note filename requested object returned `load = FALSE`. data loaded memory (`load = TRUE`), download handled using GDAL virtual file system, allowing direct access data without writing disk.","code":""},{"path":[]},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get natural earth world country polygons — ne_countries","text":"","code":"world <- ne_countries() africa <- ne_countries(continent = \"africa\") france <- ne_countries(country = \"france\")  plot(world$geometry)  plot(africa$geometry)  plot(france$geometry)   # get as SpatVector world <- ne_countries(returnclass = \"sv\") terra::plot(world)   tiny_countries <- ne_countries(type = \"tiny_countries\", scale = 50) plot(tiny_countries) #> Warning: plotting the first 10 out of 170 attributes; use max.plot = 170 to plot all"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Download data from Natural Earth and (optionally) read into R — ne_download","title":"Download data from Natural Earth and (optionally) read into R — ne_download","text":"returns downloaded data spatial object filename load=FALSE. destdir specified data can reloaded later R session using ne_load arguments.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download data from Natural Earth and (optionally) read into R — ne_download","text":"","code":"ne_download(   scale = 110L,   type = \"countries\",   category = c(\"cultural\", \"physical\", \"raster\"),   destdir = tempdir(),   load = TRUE,   returnclass = c(\"sf\", \"sv\") )"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download data from Natural Earth and (optionally) read into R — ne_download","text":"scale scale map return, one `110`, `50`, `10` `small`, `medium`, `large`. type type natural earth file download one 'countries', 'map_units', 'map_subunits', 'sovereignty', 'states' portion natural earth vector url scale . e.g. 'ne_50m_urban_areas.zip' 'urban_areas'. See Details. raster filename e.g. 'MSR_50M.zip' 'MSR_50M' category one natural earth categories : 'cultural', 'physical', 'raster' destdir save files, defaults tempdir(), getwd() also possible. load `TRUE` load spatial object R, `FALSE` return filename downloaded object. requested object vector, saved GPKG file. raster requested, saved GeoTIFF file. returnclass string determining spatial object return. Either \"sf\" simple feature (`sf`, default) \"sv\" `SpatVector` (`terra`).","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download data from Natural Earth and (optionally) read into R — ne_download","text":"object class `sf` simple feature (`sf`, default) `SpatVector` (`terra`).","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_download.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download data from Natural Earth and (optionally) read into R — ne_download","text":"Note filename requested object returned `load = FALSE`. data loaded memory (`load = TRUE`), download handled using GDAL virtual file system, allowing direct access data without writing disk.","code":""},{"path":[]},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download data from Natural Earth and (optionally) read into R — ne_download","text":"","code":"if (FALSE) { # \\dontrun{ spdf_world <- ne_download(scale = 110, type = \"countries\")  plot(spdf_world) plot(ne_download(type = \"populated_places\"))  # reloading from the saved file in the same session with same arguments  spdf_world2 <- ne_load(scale = 110, type = \"countries\")  # download followed by load from specified directory will work across sessions spdf_world <- ne_download(scale = 110, type = \"countries\", destdir = getwd()) spdf_world2 <- ne_load(scale = 110, type = \"countries\", destdir = getwd())  # for raster, here an example with Manual Shaded Relief (MSR) download & load  rst <- ne_download(scale = 50, type = \"MSR_50M\", category = \"raster\", destdir = getwd())  # load after having downloaded rst <- ne_load(   scale = 50, type = \"MSR_50M\", category = \"raster\", destdir = getwd() )  # plot library(terra) terra::plot(rst) # end dontrun } # }"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_file_name.html","id":null,"dir":"Reference","previous_headings":"","what":"return a natural earth filename based on arguments — ne_file_name","title":"return a natural earth filename based on arguments — ne_file_name","text":"returns string can used download file.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_file_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return a natural earth filename based on arguments — ne_file_name","text":"","code":"ne_file_name(   scale = 110L,   type = \"countries\",   category = c(\"cultural\", \"physical\", \"raster\") )"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_file_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return a natural earth filename based on arguments — ne_file_name","text":"scale scale map return, one `110`, `50`, `10` `small`, `medium`, `large`. type type natural earth file download one 'countries', 'map_units', 'map_subunits', 'sovereignty', 'states' portion natural earth vector url scale . e.g. 'ne_50m_urban_areas.zip' 'urban_areas' raster filename e.g. 'MSR_50M.zip' 'MSR_50M' category one natural earth categories : 'cultural', 'physical', 'raster'","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_file_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return a natural earth filename based on arguments — ne_file_name","text":"string","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_file_name.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"return a natural earth filename based on arguments — ne_file_name","text":"Note filename requested object returned `load = FALSE`. data loaded memory (`load = TRUE`), download handled using GDAL virtual file system, allowing direct access data without writing disk.","code":""},{"path":[]},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_file_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"return a natural earth filename based on arguments — ne_file_name","text":"","code":"ne_url <- ne_file_name(scale = 110, type = \"countries\")"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_find_vector_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a dataframe of available vector layers on Natural Earth — ne_find_vector_data","title":"Return a dataframe of available vector layers on Natural Earth — ne_find_vector_data","text":"Checks Natural Earth Github repository current vector layers provides file name required type argument ne_download.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_find_vector_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a dataframe of available vector layers on Natural Earth — ne_find_vector_data","text":"","code":"ne_find_vector_data(   scale = 110L,   category = c(\"cultural\", \"physical\"),   getmeta = FALSE )"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_find_vector_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a dataframe of available vector layers on Natural Earth — ne_find_vector_data","text":"scale scale map return, one `110`, `50`, `10` `small`, `medium`, `large`. category one natural earth categories : 'cultural', 'physical' getmeta whether get url metadata layer","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_find_vector_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a dataframe of available vector layers on Natural Earth — ne_find_vector_data","text":"dataframe two variables: layer metadata","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_find_vector_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return a dataframe of available vector layers on Natural Earth — ne_find_vector_data","text":"Note filename requested object returned `load = FALSE`. data loaded memory (`load = TRUE`), download handled using GDAL virtual file system, allowing direct access data without writing disk.","code":""},{"path":[]},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_find_vector_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a dataframe of available vector layers on Natural Earth — ne_find_vector_data","text":"","code":"if (FALSE) { # \\dontrun{ ne_find_vector_data(scale = 10, category = \"physical\") } # }"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_git_contents.html","id":null,"dir":"Reference","previous_headings":"","what":"Return contents of Natural Earth Github directory — ne_git_contents","title":"Return contents of Natural Earth Github directory — ne_git_contents","text":"Uses Github API return contents Natural Earth Github directories.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_git_contents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return contents of Natural Earth Github directory — ne_git_contents","text":"","code":"ne_git_contents(path)"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_git_contents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return contents of Natural Earth Github directory — ne_git_contents","text":"path string, one : '110m_physical', '110m_cultural', '50m_physical', '50m_cultural', '10m_physical', '10m_cultural'","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_git_contents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return contents of Natural Earth Github directory — ne_git_contents","text":"list. Includes parsed json content, http path, response   code.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_git_layer_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Create list of layer names and metadata links — ne_git_layer_names","title":"Create list of layer names and metadata links — ne_git_layer_names","text":"Parses Natural Earth Github folder content layer names metadata links.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_git_layer_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create list of layer names and metadata links — ne_git_layer_names","text":"","code":"ne_git_layer_names(x, scale, getmeta)"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_git_layer_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create list of layer names and metadata links — ne_git_layer_names","text":"x object returned ne_git_contents scale one 110, 50, 10 getmeta whether get url metadata layer","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_git_layer_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create list of layer names and metadata links — ne_git_layer_names","text":"list lists layer names metadata links.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_load.html","id":null,"dir":"Reference","previous_headings":"","what":"load a Natural Earth vector that has already been downloaded to R using ne_download — ne_load","title":"load a Natural Earth vector that has already been downloaded to R using ne_download — ne_load","text":"returns loaded data spatial object.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load a Natural Earth vector that has already been downloaded to R using ne_download — ne_load","text":"","code":"ne_load(   scale = 110L,   type = \"countries\",   category = c(\"cultural\", \"physical\", \"raster\"),   destdir = tempdir(),   file_name = NULL,   returnclass = c(\"sf\", \"sv\") )"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"load a Natural Earth vector that has already been downloaded to R using ne_download — ne_load","text":"scale scale map return, one `110`, `50`, `10` `small`, `medium`, `large`. type type natural earth file one 'countries', 'map_units', 'map_subunits', 'sovereignty', 'states' portion natural earth vector url scale . e.g. 'ne_50m_urban_areas.zip' 'urban_areas' raster filename e.g. 'MSR_50M.zip' 'MSR_50M' category one natural earth categories : 'cultural', 'physical', 'raster' destdir folder load files , default=tempdir() file_name OPTIONAL name file (excluding path) instead natural earth attributes returnclass string determining spatial object return. Either \"sf\" simple feature (`sf`, default) \"sv\" `SpatVector` (`terra`).","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"load a Natural Earth vector that has already been downloaded to R using ne_download — ne_load","text":"object class `sf` simple feature (`sf`, default) `SpatVector` (`terra`).","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_load.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"load a Natural Earth vector that has already been downloaded to R using ne_download — ne_load","text":"Note filename requested object returned `load = FALSE`. data loaded memory (`load = TRUE`), download handled using GDAL virtual file system, allowing direct access data without writing disk.","code":""},{"path":[]},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_load.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"load a Natural Earth vector that has already been downloaded to R using ne_download — ne_load","text":"","code":"if (FALSE) { # \\dontrun{ # download followed by load from tempdir() works in same R session spdf_world <- ne_download(scale = 110, type = \"countries\") spdf_world2 <- ne_load(scale = 110, type = \"countries\")  # download followed by load from specified directory works between R sessions spdf_world <- ne_download(scale = 110, type = \"countries\", destdir = getwd()) spdf_world2 <- ne_load(scale = 110, type = \"countries\", destdir = getwd())  # for raster download & load rst <- ne_download(scale = 50, type = \"OB_50M\", category = \"raster\", destdir = getwd())  # load after having downloaded rst <- ne_load(scale = 50, type = \"OB_50M\", category = \"raster\", destdir = getwd())  # plot library(terra) plot(rst) # end dontrun } # }"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Get natural earth world state (admin level 1) polygons — ne_states","title":"Get natural earth world state (admin level 1) polygons — ne_states","text":"returns state polygons (administrative level 1) specified countries","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get natural earth world state (admin level 1) polygons — ne_states","text":"","code":"ne_states(   country = NULL,   geounit = NULL,   iso_a2 = NULL,   spat_object = NULL,   returnclass = c(\"sf\", \"sv\") )"},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get natural earth world state (admin level 1) polygons — ne_states","text":"country character vector country names. geounit character vector geounit names. iso_a2 character vector iso_a2 country codes spat_object optional alternative states map returnclass string determining spatial object return. Either \"sf\" simple feature (`sf`, default) \"sv\" `SpatVector` (`terra`).","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get natural earth world state (admin level 1) polygons — ne_states","text":"object class `sf` simple feature (`sf`, default) `SpatVector` (`terra`).","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_states.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get natural earth world state (admin level 1) polygons — ne_states","text":"Note filename requested object returned `load = FALSE`. data loaded memory (`load = TRUE`), download handled using GDAL virtual file system, allowing direct access data without writing disk.","code":""},{"path":[]},{"path":"http://ropensci.github.io/rnaturalearth/reference/ne_states.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get natural earth world state (admin level 1) polygons — ne_states","text":"","code":"# comparing using country and geounit to filter if (requireNamespace(\"rnaturalearthhires\")) {   spdf_france_country <- ne_states(country = \"france\")   spdf_france_geounit <- ne_states(geounit = \"france\")    plot(spdf_france_country)   plot(spdf_france_geounit)    plot(ne_states(country = \"united kingdom\"))   plot(ne_states(geounit = \"england\")) } #> Loading required namespace: rnaturalearthhires #> Warning: plotting the first 9 out of 121 attributes; use max.plot = 121 to plot all  #> Warning: plotting the first 9 out of 121 attributes; use max.plot = 121 to plot all  #> Warning: plotting the first 9 out of 121 attributes; use max.plot = 121 to plot all  #> Warning: plotting the first 9 out of 121 attributes; use max.plot = 121 to plot all"},{"path":"http://ropensci.github.io/rnaturalearth/reference/normalize_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize the type argument for Natural Earth datasets — normalize_type","title":"Normalize the type argument for Natural Earth datasets — normalize_type","text":"function standardizes `type` argument mapping common names respective Natural Earth dataset names.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/normalize_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize the type argument for Natural Earth datasets — normalize_type","text":"","code":"normalize_type(type)"},{"path":"http://ropensci.github.io/rnaturalearth/reference/normalize_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize the type argument for Natural Earth datasets — normalize_type","text":"type type natural earth file download one 'countries', 'map_units', 'map_subunits', 'sovereignty', 'states' portion natural earth vector url scale . e.g. 'ne_50m_urban_areas.zip' 'urban_areas' raster filename e.g. 'MSR_50M.zip' 'MSR_50M'","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/normalize_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize the type argument for Natural Earth datasets — normalize_type","text":"string representing normalized dataset type.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/read_spatial_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Spatial Vector — read_spatial_vector","title":"Read Spatial Vector — read_spatial_vector","text":"function reads spatial vector file returns either `sf` object `sv` object.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/read_spatial_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Spatial Vector — read_spatial_vector","text":"","code":"read_spatial_vector(x, layer, returnclass = c(\"sf\", \"sv\"))"},{"path":"http://ropensci.github.io/rnaturalearth/reference/read_spatial_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Spatial Vector — read_spatial_vector","text":"x character string specifying path spatial vector file. layer character string specifying later read case one zip file. returnclass character string specifying class object return. Options \"sf\" sf object \"sv\" sv object.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/read_spatial_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Spatial Vector — read_spatial_vector","text":"Either `sf` object `sv` object.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/rnaturalearth-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rnaturalearth: World Map Data from Natural Earth — rnaturalearth-package","title":"rnaturalearth: World Map Data from Natural Earth — rnaturalearth-package","text":"Facilitates mapping making natural earth map data https://www.naturalearthdata.com/ easily available R users.","code":""},{"path":[]},{"path":"http://ropensci.github.io/rnaturalearth/reference/rnaturalearth-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rnaturalearth: World Map Data from Natural Earth — rnaturalearth-package","text":"Maintainer: Philippe Massicotte pmassicotte@hotmail.com (ORCID) Authors: Andy South southandy@gmail.com contributors: Koen Hufkens koen.hufkens@gmail.com (ORCID) [contributor]","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/sanitize_gdal_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the http URL from a VSIZIP URL — sanitize_gdal_url","title":"Extracts the http URL from a VSIZIP URL — sanitize_gdal_url","text":"function takes VSIZIP URL extracts http URL ","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/sanitize_gdal_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the http URL from a VSIZIP URL — sanitize_gdal_url","text":"","code":"sanitize_gdal_url(url)"},{"path":"http://ropensci.github.io/rnaturalearth/reference/sanitize_gdal_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the http URL from a VSIZIP URL — sanitize_gdal_url","text":"url character string representing VSIZIP URL","code":""},{"path":"http://ropensci.github.io/rnaturalearth/reference/sanitize_gdal_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the http URL from a VSIZIP URL — sanitize_gdal_url","text":"character string representing http URL extracted VSIZIP URL","code":""},{"path":[]},{"path":"http://ropensci.github.io/rnaturalearth/news/index.html","id":"new-features-development-version","dir":"Changelog","previous_headings":"","what":"New Features","title":"rnaturalearth (development version)","text":"Data now downloaded using GDAL Virtual File System, allowing ne_download() read data directly zip file without requiring extraction. transitioning GeoPackage format load = FALSE used ne_download(). modern format efficient flexible traditional shapefile format. Similarly, raster data (GeoTIFF) now read directly zip file written specified directory. example, following code downloads 50m raster dataset saves working directory:","code":"ne_download(   scale = 50,   type = \"MSR_50M\",   category = \"raster\",   load = FALSE,   destdir = getwd() )"},{"path":"http://ropensci.github.io/rnaturalearth/news/index.html","id":"bug-fixes-and-general-improvements-development-version","dir":"Changelog","previous_headings":"","what":"Bug fixes and general improvements","title":"rnaturalearth (development version)","text":"Improved package loading time removing unnecessary imports implementing lazy loading dependencies (#119). Thanks @heavywatal. Using cli package better messages. Correctly downloading parks protected areas (#114) rnaturalearth now requires rnaturalearthdata (>= 1.0.0) rnaturalearthhires (>= 1.0.0). correctly returning file name ne_download() setting load = FALSE","code":"ne_download(   scale = 10,   type = \"parks_and_protected_lands_line\",   category = \"cultural\" )  ne_download(   scale = 10,   type = \"parks_and_protected_lands_point\",   category = \"cultural\" )  ne_download(   scale = 10,   type = \"parks_and_protected_lands_scale_rank\",   category = \"cultural\" ) ne_download(   type = \"MSR_50M\",   category = \"raster\",   scale = 50,   load = FALSE )"},{"path":"http://ropensci.github.io/rnaturalearth/news/index.html","id":"rnaturalearth-101","dir":"Changelog","previous_headings":"","what":"rnaturalearth 1.0.1","title":"rnaturalearth 1.0.1","text":"CRAN release: 2023-12-15 test functions rely rnaturalearthhires available CRAN.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/news/index.html","id":"rnaturalearth-100","dir":"Changelog","previous_headings":"","what":"rnaturalearth 1.0.0","title":"rnaturalearth 1.0.0","text":"CRAN release: 2023-12-12","code":""},{"path":"http://ropensci.github.io/rnaturalearth/news/index.html","id":"breaking-changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"rnaturalearth 1.0.0","text":"breaking changes release ends support sp object favour modern interfaces (sf terra). Although sp still available CRAN, longer actively developed (https://geocompx.org/post/2023/rgdal-retirement/). main reason motivated choice transition toward sf (default) terra. Users can choose either get sf SpatVector using returnclass argument: Affected functions ne_countries(), ne_coastline(), ne_states(), ne_load() ne_download(). changing return type sf creates many problems existing code, can still convert back sp : information retirement rgdal, rgeos maptools: https://r-spatial.org/r/2022/04/12/evolution.html","code":"ne_countries(returnclass = \"sf\") ne_countries(returnclass = \"sv\") countries <- ne_countries(returnclass = \"sf\")  # option 1 sf::as_Spatial(countries)   # option 2 as(countries, \"Spatial\")"},{"path":"http://ropensci.github.io/rnaturalearth/news/index.html","id":"bugfix-1-0-0","dir":"Changelog","previous_headings":"","what":"Bugfix","title":"rnaturalearth 1.0.0","text":"Correctly downloading reading raster object (#96, closes #52).","code":""},{"path":"http://ropensci.github.io/rnaturalearth/news/index.html","id":"rnaturalearth-034","dir":"Changelog","previous_headings":"","what":"rnaturalearth 0.3.4","title":"rnaturalearth 0.3.4","text":"CRAN release: 2023-08-21 maintenance release document/use new special sentinel “_PACKAGE”.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/news/index.html","id":"rnaturalearth-033","dir":"Changelog","previous_headings":"","what":"rnaturalearth 0.3.3","title":"rnaturalearth 0.3.3","text":"CRAN release: 2023-06-06 Using lifecycle indicate support sp object eventually dropped. Users now use ne_download(returnclass = \"sf\"), instead ne_download(returnclass = \"sp\"). terra now included Imports section.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/news/index.html","id":"rnaturalearth-032","dir":"Changelog","previous_headings":"","what":"rnaturalearth 0.3.2","title":"rnaturalearth 0.3.2","text":"CRAN release: 2023-01-23 Added new maintainer contributors (#62). Using terra raster (#63) See https://r-spatial.org/r/2022/04/12/evolution.html#packages-depending--sp--raster https://r-spatial.org/r/2022/12/14/evolution2.html#deprecations--retiring-packages Fixes broken data download links. Now using Amazon hosted URLs primary source downloading data (#48, #64).","code":""},{"path":"http://ropensci.github.io/rnaturalearth/news/index.html","id":"rnaturalearth-030-2021-10-11","dir":"Changelog","previous_headings":"","what":"rnaturalearth 0.3.0 2021-10-11","title":"rnaturalearth 0.3.0 2021-10-11","text":"fix rnaturalearthhires installation #47 thank Ian Taylor #43","code":""},{"path":"http://ropensci.github.io/rnaturalearth/news/index.html","id":"rnaturalearth-020","dir":"Changelog","previous_headings":"","what":"rnaturalearth 0.2.0","title":"rnaturalearth 0.2.0","text":"add river options ne_download() adding data_list_physical.csv fixing #23 update data new version Natural Earth v4.1 released May 2018.","code":""},{"path":"http://ropensci.github.io/rnaturalearth/news/index.html","id":"rnaturalearth-010-cran","dir":"Changelog","previous_headings":"","what":"rnaturalearth 0.1.0 CRAN","title":"rnaturalearth 0.1.0 CRAN","text":"CRAN release: 2017-03-21 Initial release sf support","code":""}]
